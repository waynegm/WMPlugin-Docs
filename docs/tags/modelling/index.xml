<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WMPlugins â€“ modelling</title>
    <link>https://waynegm.github.io/WMPlugin-Docs/tags/modelling/</link>
    <description>Recent content in modelling on WMPlugins</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://waynegm.github.io/WMPlugin-Docs/tags/modelling/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Add Noise</title>
      <link>https://waynegm.github.io/WMPlugin-Docs/docs/externalattributes/addnoise/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://waynegm.github.io/WMPlugin-Docs/docs/externalattributes/addnoise/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Script: Miscellaneous/ex_add_noise.py&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;
&lt;p&gt;This Python &lt;a href=&#34;../../plugins/externalattrib/&#34;&gt;External Attribute&lt;/a&gt; script adds gaussian distributed noise to an input signal.&lt;/p&gt;
&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;
&lt;p&gt;This example shows an input signal with different levels of added noise.&lt;/p&gt;

&lt;figure class=&#34;img-centered&#34;&gt;
    &lt;img src=&#34;https://waynegm.github.io/WMPlugin-Docs/WMPlugin-Docs/docs/externalattributes/addnoise/ex_add_noise_example.jpg&#34;
         alt=&#34;Input with varying levels of added noise&#34; width=&#34;90%&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;&lt;strong&gt;Input with varying levels of added noise&lt;/strong&gt;&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;input-parameters&#34;&gt;Input Parameters&lt;/h2&gt;

&lt;figure class=&#34;img-centered&#34;&gt;
    &lt;img src=&#34;https://waynegm.github.io/WMPlugin-Docs/WMPlugin-Docs/docs/externalattributes/addnoise/ex_add_noise_input.jpg&#34;
         alt=&#34;ex_add_noise.py input parameters&#34; width=&#34;90%&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;&lt;strong&gt;ex_add_noise.py input parameters&lt;/strong&gt;&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;






&lt;div class=&#34;container&#34;&gt; &lt;table class=&#34;table table-striped table-bordered&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;NAME&lt;/th&gt;
&lt;th&gt;DESCRIPTION&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;S/N Ratio&lt;/td&gt;
&lt;td&gt;Desired signal to noise ratio.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
 &lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: PyLops Attributes</title>
      <link>https://waynegm.github.io/WMPlugin-Docs/docs/externalattributes/pylops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://waynegm.github.io/WMPlugin-Docs/docs/externalattributes/pylops/</guid>
      <description>
        
        
        &lt;p&gt;The 6.6.8 release of the wmPlugins includes a number of new Python external attribute scripts that use the &lt;a href=&#34;https://pylops.readthedocs.io/en/latest/&#34;&gt;PyLops&lt;/a&gt;
linear operator library for seismic modelling and inversion.&lt;/p&gt;
&lt;p&gt;Assuming wmPlugins is installed using the OpendTect Installation Manager, the scripts will be in the &lt;em&gt;bin/python/wmpy/PyLops&lt;/em&gt; folder
of the OpendTect software folder and include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PyLops/ex_poststack_inversion.py&lt;/li&gt;
&lt;li&gt;PyLops/ex_poststack_relative_inversion.py&lt;/li&gt;
&lt;li&gt;PyLops/ex_poststack_modelling.py&lt;/li&gt;
&lt;li&gt;PyLops/ex_prestack_modelling.py&lt;/li&gt;
&lt;li&gt;PyLops/ex_make_1d_seismic.py&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using these scripts requires a Python environment with the PyLops module and it&amp;rsquo;s dependencies installed. The section
&lt;a href=&#34;#installing-pylops&#34;&gt;Installing PyLops&lt;/a&gt; describes the PyLops installation process.&lt;/p&gt;
&lt;h2 id=&#34;pylopsex_poststack_inversionpy&#34;&gt;PyLops/ex_poststack_inversion.py&lt;/h2&gt;
&lt;p&gt;This Python &lt;a href=&#34;../../plugins/externalattrib&#34;&gt;External Attribute&lt;/a&gt; script uses the pylops.avo.poststack.PoststackInversion operator to do
post-stack seismic inversion. The output is either the log Acoustic Impedance (AI) volume or the residual error.&lt;/p&gt;
&lt;p&gt;The inputs required are volumes of the seismic to be inverted, a background log AI model and the seismic wavelet. Note that the polarity
of the seismic wavelet must match the data.&lt;/p&gt;
&lt;p&gt;The following figures show inversion input and output for a 1D model created by the PyLops/ex_make_1d_seismic.py script.&lt;/p&gt;
&lt;p&gt;
&lt;figure class=&#34;img-centered&#34;&gt;
    &lt;img src=&#34;https://waynegm.github.io/WMPlugin-Docs/WMPlugin-Docs/docs/externalattributes/pylops/ex_pylops_poststack_inversion-02.png&#34;
         alt=&#34;Impedance Model (red) and Background Model (blue)&#34; width=&#34;90%&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;&lt;strong&gt;Impedance Model (red) and Background Model (blue)&lt;/strong&gt;&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;


&lt;figure class=&#34;img-centered&#34;&gt;
    &lt;img src=&#34;https://waynegm.github.io/WMPlugin-Docs/WMPlugin-Docs/docs/externalattributes/pylops/ex_pylops_poststack_inversion-03.png&#34;
         alt=&#34;Impedance Model (red) and Seismic Model (blue)&#34; width=&#34;90%&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;&lt;strong&gt;Impedance Model (red) and Seismic Model (blue)&lt;/strong&gt;&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;


&lt;figure class=&#34;img-centered&#34;&gt;
    &lt;img src=&#34;https://waynegm.github.io/WMPlugin-Docs/WMPlugin-Docs/docs/externalattributes/pylops/ex_pylops_poststack_inversion-04.png&#34;
         alt=&#34;Impedance Model (red) and Inverted Impedance (blue)&#34; width=&#34;90%&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;&lt;strong&gt;Impedance Model (red) and Inverted Impedance (blue)&lt;/strong&gt;&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;There is also a PyLops/ex_poststack_relative_inversion.py script that runs the inversion without a background model:&lt;/p&gt;

&lt;figure class=&#34;img-centered&#34;&gt;
    &lt;img src=&#34;https://waynegm.github.io/WMPlugin-Docs/WMPlugin-Docs/docs/externalattributes/pylops/ex_pylops_poststack_inversion-05.png&#34;
         alt=&#34;Impedance Model (red) and Inverted Relative Impedance (blue)&#34; width=&#34;90%&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;&lt;strong&gt;Impedance Model (red) and Inverted Relative Impedance (blue)&lt;/strong&gt;&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;


&lt;figure class=&#34;img-centered&#34;&gt;
    &lt;img src=&#34;https://waynegm.github.io/WMPlugin-Docs/WMPlugin-Docs/docs/externalattributes/pylops/ex_pylops_poststack_inversion-07.png&#34;
         alt=&#34;Inverted Relative Impedance Example&#34; width=&#34;90%&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;&lt;strong&gt;Inverted Relative Impedance Example&lt;/strong&gt;&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;input-parameters&#34;&gt;Input Parameters&lt;/h3&gt;

&lt;figure class=&#34;img-centered&#34;&gt;
    &lt;img src=&#34;https://waynegm.github.io/WMPlugin-Docs/WMPlugin-Docs/docs/externalattributes/pylops/ex_pylops_poststack_inversion_input.png&#34;
         alt=&#34;ex_poststack_inversion.py input parameters&#34; width=&#34;90%&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;&lt;strong&gt;ex_poststack_inversion.py input parameters&lt;/strong&gt;&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;




&lt;div class=&#34;container&#34;&gt; &lt;table class=&#34;table table-striped table-bordere&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;NAME&lt;/th&gt;
&lt;th&gt;DESCRIPTION&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Output&lt;/td&gt;
&lt;td&gt;What to calculate - choice of Acoustic Impedance or the Residual Error.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Regularization (%)&lt;/td&gt;
&lt;td&gt;A small amount of noise to add to stabilize the inversion.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Wavelet&lt;/td&gt;
&lt;td&gt;An OpendTect wavelet file.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
 &lt;/div&gt;

&lt;/br&gt;
Note the wavelet polarity must be consistent with the polarity of the data being inverted.&lt;/p&gt;
&lt;h2 id=&#34;pylopsex_prestack_modellingpy&#34;&gt;PyLops/ex_prestack_modelling.py&lt;/h2&gt;
&lt;p&gt;The PyLops/ex_prestack_modelling.py script uses the pylops.avo.avo.AVOLinearModelling operator to create a pre-stack angle volume
from well data. The output is either an Aki-Richards or Fatti approximate reflectivity model filtered by a user specified wavelet.&lt;/p&gt;
&lt;p&gt;The inputs required are 3 log data cubes with compressional sonic (DT in us/m), shear sonic (DTS in us/m) and density (RHOB in g/cc). These
can be created from well log data using the &amp;ldquo;Create Log Cube&amp;rdquo; right mouse button context menu in the scene well tree or the
&amp;ldquo;Processing|Create Seismic Output|From Well Logs&amp;rdquo; main menu. Also needed is a wavelet with the appropriate polarity for the data being modelled.&lt;/p&gt;
&lt;p&gt;The generated synthetics can be displayed in the 3D window and compared with real angle stack data through the well location.&lt;/p&gt;

&lt;figure class=&#34;img-centered&#34;&gt;
    &lt;img src=&#34;https://waynegm.github.io/WMPlugin-Docs/WMPlugin-Docs/docs/externalattributes/pylops/ex_pylops_prestack_modelling-01.jpg&#34;
         alt=&#34;Prestack modelling example&#34; width=&#34;90%&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;&lt;strong&gt;Prestack modelling example&lt;/strong&gt;&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;input-parameters-1&#34;&gt;Input Parameters&lt;/h3&gt;

&lt;figure class=&#34;img-centered&#34;&gt;
    &lt;img src=&#34;https://waynegm.github.io/WMPlugin-Docs/WMPlugin-Docs/docs/externalattributes/pylops/ex_pylops_prestack_modelling_input.png&#34;
         alt=&#34;ex_prestack_modelling.py input parameters&#34; width=&#34;90%&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;&lt;strong&gt;ex_prestack_modelling.py input parameters&lt;/strong&gt;&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;






&lt;div class=&#34;container&#34;&gt; &lt;table class=&#34;table table-striped table-bordered&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;NAME&lt;/th&gt;
&lt;th&gt;DESCRIPTION&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Angle (deg)&lt;/td&gt;
&lt;td&gt;The desired output angle volume.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Method&lt;/td&gt;
&lt;td&gt;What approximation to use, Aki RIchards or Fatti.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Wavelet&lt;/td&gt;
&lt;td&gt;An OpendTect wavelet file.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
 &lt;/div&gt;

&lt;h2 id=&#34;installing-pylops&#34;&gt;Installing PyLops&lt;/h2&gt;
&lt;p&gt;The PyLops Python package and it&amp;rsquo;s dependencies can be installed in an active conda environment using:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;conda install -c conda-forge pylops
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;or&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pip install pylops
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;See the &lt;a href=&#34;https://pylops.readthedocs.io/en/latest/installation.html&#34;&gt;PyLops documentation&lt;/a&gt; for more information.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
